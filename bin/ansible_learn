#!/usr/bin/python
# coding:utf-8

from optparse import OptionParser
import json
import lib.ansible_learn.runner
import lib.ansible_learn.playbook
import lib.ansible_learn.constants as C


# 执行文件参数设置
class Cli(object):

    def __init__(self):
        pass

    def runner(self):
        parser = OptionParser()
        parser.add_option("-H", "--host-list", dest="host_list",
            help="path to hosts list", default=C.DEFAULT_HOST_LIST)
        parser.add_option("-L", "--library", dest="module_path",
            help="path to module library", default=C.DEFAULT_MODULE_PATH)
        parser.add_option("-f", "--forks", dest="forks",
            help="level of parallelism", default=C.DEFAULT_FORKS)
        parser.add_option("-n", "--name", dest="module_name",
            help="module name to execute", default=C.DEFAULT_MODULE_NAME)
        parser.add_option("-u", "--remote-user", dest="remote_user",
            help="remote username", default=C.DEFAULT_REMOTE_USER)
        parser.add_option("-p", "--pattern", dest="pattern",
            help="hostname pattern", default=C.DEFAULT_PATTERN)
        parser.add_option("-a", "--args", dest="module_args",
            help="module arguments", default=C.DEFAULT_MODULE_ARGS)
        parser.add_option("-r", "--run-playbook", dest="playbook",
            help="playbook file, instead of -n and -a",default=None)

        options, args = parser.parse_args()

        if options.playbook is None:
            return lib.ansible_learn.runner.Runner(
                module_name=options.module_name,
                module_path=options.module_path,
                module_args=options.module_args.split(' '),
                remote_user=options.remote_user,
                host_list=options.host_list,
                pattern=options.pattern,
                fork=options.forks,
            )
        else:
            return lib.ansible_learn.playbook.PlayBook(
                module_path=options.module_path,
                host_list=options.host_list,
                remote_user=options.remote_user,
                forks=options.forks
            )


if __name__ == '__main__':

    result = Cli().runner().run()
    print json.dumps(result, sort_keys=True, indent=4)

